<RenderTimeComponent @ref="RenderTimeComponent" />
<div class="component-spit-view">
    <div>
        <h5>Naive Component</h5>
        <div>
            <p>Every item is a component that just writes the expected output.</p>
            <p>When deleting an item the whole render tree has to be processed.</p>
        </div>
        @if (Values != null)
        {
            <DumpListComponent Values="Values" SetRendertime="SetRenderTime" />
        }
    </div>
    <div>
        <h5>Semi Smart Component</h5>
        <div>
            <p>Every item is a component, but they override ShouldRender.</p>
            <p>This improves performance when deleting near the end of the list since less components need to be rendered.</p>
        </div>
        @if (Values != null)
        {
            <SemiSmartListComponent Values="Values.ToList()" SetRendertime="SetRenderTime" />
        }
    </div>
    <div>
        <h5>Flat Component</h5>
        <div>
            <p>The whole list is only one component.</p>
            <p>This improves render performance but limits flexibility. </p>
        </div>
        @if (Values != null)
        {
            <FlatListComponent Values="Values.ToList()" SetRendertime="SetRenderTime" />
        }
    </div>
    <div>
        <h5>Delete it Yourself Component</h5>
        <div>
            <p>Uses JavaScript interop to remove target child from DOM.</p>
            <p>This results in extreme performance but can cause unexpected behavior.</p>
            <p style="color: red">Use with caution!</p>
        </div>
        @if (Values != null)
        {
            <DiYListComponent Values="Values.ToList()" SetRendertime="SetRenderTime" />
        }
    </div>
</div>

@code {
    private const int LIST_SIZE = 1000;
    private List<string> Values { get; set; }
    private RenderTimeComponent RenderTimeComponent { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Values = new List<string>(LIST_SIZE);
        for (var i = 1; i <= LIST_SIZE; i++)
        {
            Values.Add($"Element {i}");
        }
    }

    private void SetRenderTime(double diff)
    {
        RenderTimeComponent.Diff = diff;
    }
}
